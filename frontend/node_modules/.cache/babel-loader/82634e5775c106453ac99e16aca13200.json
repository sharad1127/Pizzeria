{"ast":null,"code":"import axios from 'axios';\nconst LOGIN_USER_KEY = 'LOGIN_USER_KEY';\nlet baseURL; // if (process.env.REACT_APP_ENVIRONMENT && process.env.REACT_APP_ENVIRONMENT === 'PRODUCTION') {\n//     baseURL = process.env.REACT_APP_API_BASE_URL;\n// } else {\n//     baseURL = 'http://127.0.0.1:8000';\n// }\n\nbaseURL = 'https://pizzeria-backend.viola-ivolga.repl.co/';\nconst api = axios.create({\n  baseURL: baseURL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\napi.interceptors.request.use(config => {\n  if (localStorage.getItem(LOGIN_USER_KEY)) {\n    config.headers.common['Authorization'] = JSON.parse(localStorage.getItem(LOGIN_USER_KEY)).token;\n  }\n\n  return config;\n}, err => {\n  console.error(err);\n});\nexport default class API {\n  constructor() {\n    this.signUp = async (user_name, password, email) => {\n      const signup = await api.post(\"signup/\", {\n        user_name: user_name,\n        password: password,\n        email: email\n      }).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return signup;\n    };\n\n    this.signIn = async (email, password) => {\n      const signin = await api.post(\"signin/\", {\n        password: password,\n        email: email\n      }).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return signin;\n    };\n\n    this.getUser = async () => {\n      const user = await api;\n      const url = ''.get(url).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return user;\n    };\n\n    this.getItems = async params => {\n      try {\n        const response = await api.get('items/', {\n          params\n        });\n        return response.data;\n      } catch (error) {\n        throw new Error(error);\n      }\n    };\n\n    this.getCart = async () => {\n      try {\n        const response = await api.get('carts/');\n        return response.data;\n      } catch (error) {\n        throw new Error(error);\n      }\n    };\n\n    this.addCart = async params => {\n      try {\n        const response = await api.post('carts/add/', {\n          'quantity': 1,\n          'item': params\n        });\n        return response.data;\n      } catch (error) {\n        throw new Error(error);\n      }\n    };\n\n    this.updateCart = async (cartItem, newCount) => {\n      try {\n        const response = await api.put('carts/update/' + cartItem + '/', {\n          quantity: newCount\n        });\n        return response.data;\n      } catch (error) {\n        throw new Error(error);\n      }\n    };\n\n    this.deleteCart = async cartItem => {\n      try {\n        const response = await api.delete('carts/delete/' + cartItem + '/');\n        return response.data;\n      } catch (error) {\n        throw new Error(error);\n      }\n    };\n\n    this.orderAdd = async _ref => {\n      let {\n        name,\n        num,\n        address,\n        code,\n        apt,\n        city,\n        state,\n        subtotal\n      } = _ref;\n      let user_id = JSON.parse(localStorage.getItem('LOGIN_USER_KEY')).id;\n\n      try {\n        const response = await api.post('orders/add/', {\n          \"total_price\": subtotal,\n          \"full_name\": name,\n          \"phone_number\": num,\n          \"address_line1\": address,\n          \"postal_code\": code,\n          \"address_line2\": apt,\n          \"city\": city,\n          \"user\": user_id,\n          \"state\": \"washington\"\n        });\n        return response.data;\n      } catch (error) {\n        throw new Error(error);\n      }\n    };\n  }\n\n}","map":{"version":3,"names":["axios","LOGIN_USER_KEY","baseURL","api","create","headers","interceptors","request","use","config","localStorage","getItem","common","JSON","parse","token","err","console","error","API","signUp","user_name","password","email","signup","post","then","response","data","catch","Error","signIn","signin","getUser","user","url","get","getItems","params","getCart","addCart","updateCart","cartItem","newCount","put","quantity","deleteCart","delete","orderAdd","name","num","address","code","apt","city","state","subtotal","user_id","id"],"sources":["/Users/musubimanagement/Desktop/Push _projects/Pizzaria-main/frontend/src/API.js"],"sourcesContent":["import axios from 'axios';\nconst LOGIN_USER_KEY = 'LOGIN_USER_KEY';\n\nlet baseURL;\n// if (process.env.REACT_APP_ENVIRONMENT && process.env.REACT_APP_ENVIRONMENT === 'PRODUCTION') {\n//     baseURL = process.env.REACT_APP_API_BASE_URL;\n// } else {\n//     baseURL = 'http://127.0.0.1:8000';\n// }\nbaseURL = 'https://pizzeria-backend.viola-ivolga.repl.co/'\n\nconst api = axios.create({\n    baseURL: baseURL,\n    headers: {\n        'Content-Type': 'application/json',\n   \n    }\n});\n\napi.interceptors.request.use(\n    config => {\n        if (localStorage.getItem(LOGIN_USER_KEY)) {\n            config.headers.common['Authorization'] = JSON.parse(localStorage.getItem(LOGIN_USER_KEY)).token;\n        }\n\n        return config;\n    },\n    err => {\n        console.error(err);\n    }\n);\n\nexport default class API {\n  \n    signUp = async(user_name,password,email) =>{\n        const signup = await api\n        .post(\"signup/\",{\n            user_name:user_name, password:password, email:email\n        })\n        .then((response)=>{\n            return response.data\n        })\n\n        .catch((error)=>{\n            throw new Error(error)\n        })\n\n    return signup \n    }\n\n\n\n    signIn = async(email, password) =>{\n        const signin = await api\n        .post(\"signin/\",{\n             password:password, email:email\n        })\n        .then((response)=>{\n            return response.data\n        })\n\n        .catch((error)=>{\n            throw new Error(error)\n        })\n        \n    return signin\n    }\n\n\n    getUser = async() =>{\n        const user = await api\n        const url=''\n        .get(url)\n       \n        .then((response)=>{\n            return response.data\n        })\n\n        .catch((error)=>{\n            throw new Error(error)\n        })\n        \n    return user\n    }\n        getItems = async params => {\n        try {\n            const response = await api.get('items/', { params });\n            return response.data;\n        } catch (error) {\n            throw new Error(error);\n        }\n    };\n\n\n    getCart = async () => {\n        try {\n            const response = await api.get('carts/');\n            return response.data;\n        } catch (error) {\n            throw new Error(error);\n        }\n    };\n    addCart = async params => {\n        try {\n            const response = await api.post('carts/add/', {\n                'quantity':1,\n                'item':params } ) ;\n            return response.data;\n        } catch (error) {\n            throw new Error(error);\n        }\n    };\n\n    updateCart = async (cartItem,newCount) => {\n        try {\n            const response = await api.put('carts/update/'+ cartItem + '/' , {quantity:newCount} );\n            return response.data;\n        } catch (error) {\n            throw new Error(error);\n        }\n    };\n    deleteCart = async (cartItem) => {\n        try {\n            const response = await api.delete('carts/delete/'+ cartItem + '/' );\n            return response.data;\n        } catch (error) {\n            throw new Error(error);\n        }\n    };\n\n    orderAdd = async ({name, num, address, code,apt,city,state, subtotal}) => {\n        let user_id = JSON.parse(localStorage.getItem('LOGIN_USER_KEY')).id\n        try {\n            const response = await api.post('orders/add/', \n\n    {\n        \"total_price\": subtotal,\n        \"full_name\":name,\n        \"phone_number\":num,\n        \"address_line1\": address,\n        \"postal_code\": code,\n        \"address_line2\": apt,\n        \"city\": city,\n        \"user\": user_id,\n        \"state\": \"washington\",\n    }\n     ) ;\n            return response.data;\n        } catch (error) {\n            throw new Error(error);\n        }\n    };  \n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}